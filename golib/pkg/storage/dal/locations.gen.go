// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"memo/pkg/storage"
)

func newLocation(db *gorm.DB, opts ...gen.DOOption) location {
	_location := location{}

	_location.locationDo.UseDB(db, opts...)
	_location.locationDo.UseModel(&storage.Location{})

	tableName := _location.locationDo.TableName()
	_location.ALL = field.NewAsterisk(tableName)
	_location.ID = field.NewUint(tableName, "id")
	_location.Protocol = field.NewString(tableName, "protocol")
	_location.Link = field.NewString(tableName, "link")
	_location.ExLink = field.NewString(tableName, "ex_link")
	_location.Type = field.NewString(tableName, "type")

	_location.fillFieldMap()

	return _location
}

type location struct {
	locationDo

	ALL      field.Asterisk
	ID       field.Uint
	Protocol field.String
	Link     field.String
	ExLink   field.String
	Type     field.String

	fieldMap map[string]field.Expr
}

func (l location) Table(newTableName string) *location {
	l.locationDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l location) As(alias string) *location {
	l.locationDo.DO = *(l.locationDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *location) updateTableName(table string) *location {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.Protocol = field.NewString(table, "protocol")
	l.Link = field.NewString(table, "link")
	l.ExLink = field.NewString(table, "ex_link")
	l.Type = field.NewString(table, "type")

	l.fillFieldMap()

	return l
}

func (l *location) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *location) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["id"] = l.ID
	l.fieldMap["protocol"] = l.Protocol
	l.fieldMap["link"] = l.Link
	l.fieldMap["ex_link"] = l.ExLink
	l.fieldMap["type"] = l.Type
}

func (l location) clone(db *gorm.DB) location {
	l.locationDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l location) replaceDB(db *gorm.DB) location {
	l.locationDo.ReplaceDB(db)
	return l
}

type locationDo struct{ gen.DO }

type ILocationDo interface {
	gen.SubQuery
	Debug() ILocationDo
	WithContext(ctx context.Context) ILocationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILocationDo
	WriteDB() ILocationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILocationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILocationDo
	Not(conds ...gen.Condition) ILocationDo
	Or(conds ...gen.Condition) ILocationDo
	Select(conds ...field.Expr) ILocationDo
	Where(conds ...gen.Condition) ILocationDo
	Order(conds ...field.Expr) ILocationDo
	Distinct(cols ...field.Expr) ILocationDo
	Omit(cols ...field.Expr) ILocationDo
	Join(table schema.Tabler, on ...field.Expr) ILocationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILocationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILocationDo
	Group(cols ...field.Expr) ILocationDo
	Having(conds ...gen.Condition) ILocationDo
	Limit(limit int) ILocationDo
	Offset(offset int) ILocationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILocationDo
	Unscoped() ILocationDo
	Create(values ...*storage.Location) error
	CreateInBatches(values []*storage.Location, batchSize int) error
	Save(values ...*storage.Location) error
	First() (*storage.Location, error)
	Take() (*storage.Location, error)
	Last() (*storage.Location, error)
	Find() ([]*storage.Location, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*storage.Location, err error)
	FindInBatches(result *[]*storage.Location, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*storage.Location) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILocationDo
	Assign(attrs ...field.AssignExpr) ILocationDo
	Joins(fields ...field.RelationField) ILocationDo
	Preload(fields ...field.RelationField) ILocationDo
	FirstOrInit() (*storage.Location, error)
	FirstOrCreate() (*storage.Location, error)
	FindByPage(offset int, limit int) (result []*storage.Location, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILocationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l locationDo) Debug() ILocationDo {
	return l.withDO(l.DO.Debug())
}

func (l locationDo) WithContext(ctx context.Context) ILocationDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l locationDo) ReadDB() ILocationDo {
	return l.Clauses(dbresolver.Read)
}

func (l locationDo) WriteDB() ILocationDo {
	return l.Clauses(dbresolver.Write)
}

func (l locationDo) Session(config *gorm.Session) ILocationDo {
	return l.withDO(l.DO.Session(config))
}

func (l locationDo) Clauses(conds ...clause.Expression) ILocationDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l locationDo) Returning(value interface{}, columns ...string) ILocationDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l locationDo) Not(conds ...gen.Condition) ILocationDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l locationDo) Or(conds ...gen.Condition) ILocationDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l locationDo) Select(conds ...field.Expr) ILocationDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l locationDo) Where(conds ...gen.Condition) ILocationDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l locationDo) Order(conds ...field.Expr) ILocationDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l locationDo) Distinct(cols ...field.Expr) ILocationDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l locationDo) Omit(cols ...field.Expr) ILocationDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l locationDo) Join(table schema.Tabler, on ...field.Expr) ILocationDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l locationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILocationDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l locationDo) RightJoin(table schema.Tabler, on ...field.Expr) ILocationDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l locationDo) Group(cols ...field.Expr) ILocationDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l locationDo) Having(conds ...gen.Condition) ILocationDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l locationDo) Limit(limit int) ILocationDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l locationDo) Offset(offset int) ILocationDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l locationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILocationDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l locationDo) Unscoped() ILocationDo {
	return l.withDO(l.DO.Unscoped())
}

func (l locationDo) Create(values ...*storage.Location) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l locationDo) CreateInBatches(values []*storage.Location, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l locationDo) Save(values ...*storage.Location) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l locationDo) First() (*storage.Location, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Location), nil
	}
}

func (l locationDo) Take() (*storage.Location, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Location), nil
	}
}

func (l locationDo) Last() (*storage.Location, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Location), nil
	}
}

func (l locationDo) Find() ([]*storage.Location, error) {
	result, err := l.DO.Find()
	return result.([]*storage.Location), err
}

func (l locationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*storage.Location, err error) {
	buf := make([]*storage.Location, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l locationDo) FindInBatches(result *[]*storage.Location, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l locationDo) Attrs(attrs ...field.AssignExpr) ILocationDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l locationDo) Assign(attrs ...field.AssignExpr) ILocationDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l locationDo) Joins(fields ...field.RelationField) ILocationDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l locationDo) Preload(fields ...field.RelationField) ILocationDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l locationDo) FirstOrInit() (*storage.Location, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Location), nil
	}
}

func (l locationDo) FirstOrCreate() (*storage.Location, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Location), nil
	}
}

func (l locationDo) FindByPage(offset int, limit int) (result []*storage.Location, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l locationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l locationDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l locationDo) Delete(models ...*storage.Location) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *locationDo) withDO(do gen.Dao) *locationDo {
	l.DO = *do.(*gen.DO)
	return l
}
