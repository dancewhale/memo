// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"memo/pkg/storage"
)

func newAnnotation(db *gorm.DB, opts ...gen.DOOption) annotation {
	_annotation := annotation{}

	_annotation.annotationDo.UseDB(db, opts...)
	_annotation.annotationDo.UseModel(&storage.Annotation{})

	tableName := _annotation.annotationDo.TableName()
	_annotation.ALL = field.NewAsterisk(tableName)
	_annotation.ID = field.NewUint(tableName, "id")
	_annotation.Start = field.NewUint(tableName, "start")
	_annotation.End = field.NewUint(tableName, "end")
	_annotation.HeadlineID = field.NewString(tableName, "headline_id")
	_annotation.Face = field.NewString(tableName, "face")
	_annotation.CommentText = field.NewString(tableName, "comment_text")
	_annotation.AnnoText = field.NewString(tableName, "anno_text")

	_annotation.fillFieldMap()

	return _annotation
}

type annotation struct {
	annotationDo

	ALL         field.Asterisk
	ID          field.Uint
	Start       field.Uint
	End         field.Uint
	HeadlineID  field.String
	Face        field.String
	CommentText field.String
	AnnoText    field.String

	fieldMap map[string]field.Expr
}

func (a annotation) Table(newTableName string) *annotation {
	a.annotationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a annotation) As(alias string) *annotation {
	a.annotationDo.DO = *(a.annotationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *annotation) updateTableName(table string) *annotation {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.Start = field.NewUint(table, "start")
	a.End = field.NewUint(table, "end")
	a.HeadlineID = field.NewString(table, "headline_id")
	a.Face = field.NewString(table, "face")
	a.CommentText = field.NewString(table, "comment_text")
	a.AnnoText = field.NewString(table, "anno_text")

	a.fillFieldMap()

	return a
}

func (a *annotation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *annotation) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["start"] = a.Start
	a.fieldMap["end"] = a.End
	a.fieldMap["headline_id"] = a.HeadlineID
	a.fieldMap["face"] = a.Face
	a.fieldMap["comment_text"] = a.CommentText
	a.fieldMap["anno_text"] = a.AnnoText
}

func (a annotation) clone(db *gorm.DB) annotation {
	a.annotationDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a annotation) replaceDB(db *gorm.DB) annotation {
	a.annotationDo.ReplaceDB(db)
	return a
}

type annotationDo struct{ gen.DO }

type IAnnotationDo interface {
	gen.SubQuery
	Debug() IAnnotationDo
	WithContext(ctx context.Context) IAnnotationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnnotationDo
	WriteDB() IAnnotationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnnotationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnnotationDo
	Not(conds ...gen.Condition) IAnnotationDo
	Or(conds ...gen.Condition) IAnnotationDo
	Select(conds ...field.Expr) IAnnotationDo
	Where(conds ...gen.Condition) IAnnotationDo
	Order(conds ...field.Expr) IAnnotationDo
	Distinct(cols ...field.Expr) IAnnotationDo
	Omit(cols ...field.Expr) IAnnotationDo
	Join(table schema.Tabler, on ...field.Expr) IAnnotationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnnotationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnnotationDo
	Group(cols ...field.Expr) IAnnotationDo
	Having(conds ...gen.Condition) IAnnotationDo
	Limit(limit int) IAnnotationDo
	Offset(offset int) IAnnotationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnnotationDo
	Unscoped() IAnnotationDo
	Create(values ...*storage.Annotation) error
	CreateInBatches(values []*storage.Annotation, batchSize int) error
	Save(values ...*storage.Annotation) error
	First() (*storage.Annotation, error)
	Take() (*storage.Annotation, error)
	Last() (*storage.Annotation, error)
	Find() ([]*storage.Annotation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*storage.Annotation, err error)
	FindInBatches(result *[]*storage.Annotation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*storage.Annotation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnnotationDo
	Assign(attrs ...field.AssignExpr) IAnnotationDo
	Joins(fields ...field.RelationField) IAnnotationDo
	Preload(fields ...field.RelationField) IAnnotationDo
	FirstOrInit() (*storage.Annotation, error)
	FirstOrCreate() (*storage.Annotation, error)
	FindByPage(offset int, limit int) (result []*storage.Annotation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnnotationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a annotationDo) Debug() IAnnotationDo {
	return a.withDO(a.DO.Debug())
}

func (a annotationDo) WithContext(ctx context.Context) IAnnotationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a annotationDo) ReadDB() IAnnotationDo {
	return a.Clauses(dbresolver.Read)
}

func (a annotationDo) WriteDB() IAnnotationDo {
	return a.Clauses(dbresolver.Write)
}

func (a annotationDo) Session(config *gorm.Session) IAnnotationDo {
	return a.withDO(a.DO.Session(config))
}

func (a annotationDo) Clauses(conds ...clause.Expression) IAnnotationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a annotationDo) Returning(value interface{}, columns ...string) IAnnotationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a annotationDo) Not(conds ...gen.Condition) IAnnotationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a annotationDo) Or(conds ...gen.Condition) IAnnotationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a annotationDo) Select(conds ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a annotationDo) Where(conds ...gen.Condition) IAnnotationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a annotationDo) Order(conds ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a annotationDo) Distinct(cols ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a annotationDo) Omit(cols ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a annotationDo) Join(table schema.Tabler, on ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a annotationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a annotationDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a annotationDo) Group(cols ...field.Expr) IAnnotationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a annotationDo) Having(conds ...gen.Condition) IAnnotationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a annotationDo) Limit(limit int) IAnnotationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a annotationDo) Offset(offset int) IAnnotationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a annotationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnnotationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a annotationDo) Unscoped() IAnnotationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a annotationDo) Create(values ...*storage.Annotation) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a annotationDo) CreateInBatches(values []*storage.Annotation, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a annotationDo) Save(values ...*storage.Annotation) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a annotationDo) First() (*storage.Annotation, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Annotation), nil
	}
}

func (a annotationDo) Take() (*storage.Annotation, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Annotation), nil
	}
}

func (a annotationDo) Last() (*storage.Annotation, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Annotation), nil
	}
}

func (a annotationDo) Find() ([]*storage.Annotation, error) {
	result, err := a.DO.Find()
	return result.([]*storage.Annotation), err
}

func (a annotationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*storage.Annotation, err error) {
	buf := make([]*storage.Annotation, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a annotationDo) FindInBatches(result *[]*storage.Annotation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a annotationDo) Attrs(attrs ...field.AssignExpr) IAnnotationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a annotationDo) Assign(attrs ...field.AssignExpr) IAnnotationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a annotationDo) Joins(fields ...field.RelationField) IAnnotationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a annotationDo) Preload(fields ...field.RelationField) IAnnotationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a annotationDo) FirstOrInit() (*storage.Annotation, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Annotation), nil
	}
}

func (a annotationDo) FirstOrCreate() (*storage.Annotation, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Annotation), nil
	}
}

func (a annotationDo) FindByPage(offset int, limit int) (result []*storage.Annotation, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a annotationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a annotationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a annotationDo) Delete(models ...*storage.Annotation) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *annotationDo) withDO(do gen.Dao) *annotationDo {
	a.DO = *do.(*gen.DO)
	return a
}
