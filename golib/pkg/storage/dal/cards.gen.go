// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"memo/pkg/storage"
)

func newCard(db *gorm.DB, opts ...gen.DOOption) card {
	_card := card{}

	_card.cardDo.UseDB(db, opts...)
	_card.cardDo.UseModel(&storage.Card{})

	tableName := _card.cardDo.TableName()
	_card.ALL = field.NewAsterisk(tableName)
	_card.Orgid = field.NewString(tableName, "orgid")
	_card.CreatedAt = field.NewTime(tableName, "created_at")
	_card.UpdatedAt = field.NewTime(tableName, "updated_at")
	_card.DeletedAt = field.NewField(tableName, "deleted_at")
	_card.Fsrs = cardHasOneFsrs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Fsrs", "storage.FsrsInfo"),
	}

	_card.Headline = cardHasManyHeadline{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Headline", "storage.Headline"),
		File: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Headline.File", "storage.File"),
		},
		Card: struct {
			field.RelationField
			Fsrs struct {
				field.RelationField
			}
			Headline struct {
				field.RelationField
			}
			ReviewLogs struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Headline.Card", "storage.Card"),
			Fsrs: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Headline.Card.Fsrs", "storage.FsrsInfo"),
			},
			Headline: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Headline.Card.Headline", "storage.Headline"),
			},
			ReviewLogs: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Headline.Card.ReviewLogs", "storage.ReviewLog"),
			},
		},
		Children: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Headline.Children", "storage.Headline"),
		},
	}

	_card.ReviewLogs = cardHasManyReviewLogs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ReviewLogs", "storage.ReviewLog"),
	}

	_card.fillFieldMap()

	return _card
}

type card struct {
	cardDo

	ALL       field.Asterisk
	Orgid     field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Fsrs      cardHasOneFsrs

	Headline cardHasManyHeadline

	ReviewLogs cardHasManyReviewLogs

	fieldMap map[string]field.Expr
}

func (c card) Table(newTableName string) *card {
	c.cardDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c card) As(alias string) *card {
	c.cardDo.DO = *(c.cardDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *card) updateTableName(table string) *card {
	c.ALL = field.NewAsterisk(table)
	c.Orgid = field.NewString(table, "orgid")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *card) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *card) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["orgid"] = c.Orgid
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt

}

func (c card) clone(db *gorm.DB) card {
	c.cardDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c card) replaceDB(db *gorm.DB) card {
	c.cardDo.ReplaceDB(db)
	return c
}

type cardHasOneFsrs struct {
	db *gorm.DB

	field.RelationField
}

func (a cardHasOneFsrs) Where(conds ...field.Expr) *cardHasOneFsrs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cardHasOneFsrs) WithContext(ctx context.Context) *cardHasOneFsrs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cardHasOneFsrs) Session(session *gorm.Session) *cardHasOneFsrs {
	a.db = a.db.Session(session)
	return &a
}

func (a cardHasOneFsrs) Model(m *storage.Card) *cardHasOneFsrsTx {
	return &cardHasOneFsrsTx{a.db.Model(m).Association(a.Name())}
}

type cardHasOneFsrsTx struct{ tx *gorm.Association }

func (a cardHasOneFsrsTx) Find() (result *storage.FsrsInfo, err error) {
	return result, a.tx.Find(&result)
}

func (a cardHasOneFsrsTx) Append(values ...*storage.FsrsInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cardHasOneFsrsTx) Replace(values ...*storage.FsrsInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cardHasOneFsrsTx) Delete(values ...*storage.FsrsInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cardHasOneFsrsTx) Clear() error {
	return a.tx.Clear()
}

func (a cardHasOneFsrsTx) Count() int64 {
	return a.tx.Count()
}

type cardHasManyHeadline struct {
	db *gorm.DB

	field.RelationField

	File struct {
		field.RelationField
	}
	Card struct {
		field.RelationField
		Fsrs struct {
			field.RelationField
		}
		Headline struct {
			field.RelationField
		}
		ReviewLogs struct {
			field.RelationField
		}
	}
	Children struct {
		field.RelationField
	}
}

func (a cardHasManyHeadline) Where(conds ...field.Expr) *cardHasManyHeadline {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cardHasManyHeadline) WithContext(ctx context.Context) *cardHasManyHeadline {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cardHasManyHeadline) Session(session *gorm.Session) *cardHasManyHeadline {
	a.db = a.db.Session(session)
	return &a
}

func (a cardHasManyHeadline) Model(m *storage.Card) *cardHasManyHeadlineTx {
	return &cardHasManyHeadlineTx{a.db.Model(m).Association(a.Name())}
}

type cardHasManyHeadlineTx struct{ tx *gorm.Association }

func (a cardHasManyHeadlineTx) Find() (result []*storage.Headline, err error) {
	return result, a.tx.Find(&result)
}

func (a cardHasManyHeadlineTx) Append(values ...*storage.Headline) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cardHasManyHeadlineTx) Replace(values ...*storage.Headline) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cardHasManyHeadlineTx) Delete(values ...*storage.Headline) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cardHasManyHeadlineTx) Clear() error {
	return a.tx.Clear()
}

func (a cardHasManyHeadlineTx) Count() int64 {
	return a.tx.Count()
}

type cardHasManyReviewLogs struct {
	db *gorm.DB

	field.RelationField
}

func (a cardHasManyReviewLogs) Where(conds ...field.Expr) *cardHasManyReviewLogs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cardHasManyReviewLogs) WithContext(ctx context.Context) *cardHasManyReviewLogs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cardHasManyReviewLogs) Session(session *gorm.Session) *cardHasManyReviewLogs {
	a.db = a.db.Session(session)
	return &a
}

func (a cardHasManyReviewLogs) Model(m *storage.Card) *cardHasManyReviewLogsTx {
	return &cardHasManyReviewLogsTx{a.db.Model(m).Association(a.Name())}
}

type cardHasManyReviewLogsTx struct{ tx *gorm.Association }

func (a cardHasManyReviewLogsTx) Find() (result []*storage.ReviewLog, err error) {
	return result, a.tx.Find(&result)
}

func (a cardHasManyReviewLogsTx) Append(values ...*storage.ReviewLog) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cardHasManyReviewLogsTx) Replace(values ...*storage.ReviewLog) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cardHasManyReviewLogsTx) Delete(values ...*storage.ReviewLog) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cardHasManyReviewLogsTx) Clear() error {
	return a.tx.Clear()
}

func (a cardHasManyReviewLogsTx) Count() int64 {
	return a.tx.Count()
}

type cardDo struct{ gen.DO }

func (c cardDo) Debug() *cardDo {
	return c.withDO(c.DO.Debug())
}

func (c cardDo) WithContext(ctx context.Context) *cardDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cardDo) ReadDB() *cardDo {
	return c.Clauses(dbresolver.Read)
}

func (c cardDo) WriteDB() *cardDo {
	return c.Clauses(dbresolver.Write)
}

func (c cardDo) Session(config *gorm.Session) *cardDo {
	return c.withDO(c.DO.Session(config))
}

func (c cardDo) Clauses(conds ...clause.Expression) *cardDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cardDo) Returning(value interface{}, columns ...string) *cardDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cardDo) Not(conds ...gen.Condition) *cardDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cardDo) Or(conds ...gen.Condition) *cardDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cardDo) Select(conds ...field.Expr) *cardDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cardDo) Where(conds ...gen.Condition) *cardDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cardDo) Order(conds ...field.Expr) *cardDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cardDo) Distinct(cols ...field.Expr) *cardDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cardDo) Omit(cols ...field.Expr) *cardDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cardDo) Join(table schema.Tabler, on ...field.Expr) *cardDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cardDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cardDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cardDo) RightJoin(table schema.Tabler, on ...field.Expr) *cardDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cardDo) Group(cols ...field.Expr) *cardDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cardDo) Having(conds ...gen.Condition) *cardDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cardDo) Limit(limit int) *cardDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cardDo) Offset(offset int) *cardDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cardDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cardDo) Unscoped() *cardDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cardDo) Create(values ...*storage.Card) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cardDo) CreateInBatches(values []*storage.Card, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cardDo) Save(values ...*storage.Card) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cardDo) First() (*storage.Card, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Card), nil
	}
}

func (c cardDo) Take() (*storage.Card, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Card), nil
	}
}

func (c cardDo) Last() (*storage.Card, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Card), nil
	}
}

func (c cardDo) Find() ([]*storage.Card, error) {
	result, err := c.DO.Find()
	return result.([]*storage.Card), err
}

func (c cardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*storage.Card, err error) {
	buf := make([]*storage.Card, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cardDo) FindInBatches(result *[]*storage.Card, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cardDo) Attrs(attrs ...field.AssignExpr) *cardDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cardDo) Assign(attrs ...field.AssignExpr) *cardDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cardDo) Joins(fields ...field.RelationField) *cardDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cardDo) Preload(fields ...field.RelationField) *cardDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cardDo) FirstOrInit() (*storage.Card, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Card), nil
	}
}

func (c cardDo) FirstOrCreate() (*storage.Card, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*storage.Card), nil
	}
}

func (c cardDo) FindByPage(offset int, limit int) (result []*storage.Card, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cardDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cardDo) Delete(models ...*storage.Card) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cardDo) withDO(do gen.Dao) *cardDo {
	c.DO = *do.(*gen.DO)
	return c
}
